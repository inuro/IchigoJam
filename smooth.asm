@XY		 ' 	
	R0=8	 ' 	
	R0=R0<<8	 ' 	#800
	R0+=250	 ' 	#800+#FAが変数Xの位置
	R0=R1+R0	 ' 	仮想メモリ #800+250 の変数Xの実アドレス位置を計算
	R2=[R0+0]W	 ' 	変数Xの16bitの数をR2へ入れる
	R3=[R0+1]W	 ' 	変数Yの16bitの数をR3へ入れる。
	R1=R2	 ' 	Xは後でも使うので、退避(push{R2}でも良いが遅い
	R2=R2>>2	 ' 	X=X/4
	R3=R3<<5	 ' 	Y=Y*32
	R3=R2+R3	 ' 	VRAMのベース#900からのオフセット値をR3に格納
		 ' 	
@ADR		 ' 	
	R0+=6	 ' 	#仮想アドレス8FAの実位置が入っているので、+6してVRAMのベース#900の実アドレスを計算
	R3+=R0	 ' 	#900+X/4+Y*#20のPEEK先アドレス
	R2=R1	 ' 	退避していたオリジナルのXの値を取得
	R1=3	 ' 	X%4の為に、ビットシフト値の3を格納
	R2&=R1	 ' 	X%4を計算
	R2+=224	 ' 	表示すべきキャラクタコード（左）を計算。右はこれに更に+4
	R0=0	 ' 	
@LEFT		 ' 	
	R1=[R3]	 ' 	#900+X/4+Y*#20の位置に現在あるキャラクタを取得
	R1+=0	 ' 	
	IF !0 GOTO @L2	 ' 	既に存在していれば描画せず次へ
	[R3]=R2	 ' 	#900+X/4+Y*#20の位置に自機パターン（左）を描画
	GOTO @RIGHT	 ' 	
@L2		 ' 	
	R0=#F0	 ' 	当たり判定用のフラグ
		 ' 	
@RIGHT		 ' 	
	R1=[R3+1]	 ' 	
	R1+=0	 ' 	
	IF !0 GOTO @R2	 ' 	既に存在していれば描画せず次へ
	R2+=4	 ' 	自機パターン（右）は4バイト先
	[R3+1]=R2	 ' 	#900+X/4+1+Y*#20の位置に自機パターン（右）を描画
	GOTO @END	 ' 	
@R2		 ' 	当たり判定用のフラグ
	R0+=#F	 ' 	
@END		 ' 	
	RET	 ' 	RETURN
